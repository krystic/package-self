From 14051eabadf5ea806208df7ec9cd0e0a8b697732 Mon Sep 17 00:00:00 2001
From: txthinking <cloud@txthinking.com>
Date: Fri, 30 Jun 2023 17:49:49 +0800
Subject: [PATCH 04/10] wsserver --xForwardedFor

---
 cli/brook/main.go |  5 +++++
 wsserver.go       | 47 ++++++++++++++++++++++++++++++++---------------
 2 files changed, 37 insertions(+), 15 deletions(-)

diff --git a/cli/brook/main.go b/cli/brook/main.go
index 83cf3b4..d2a06fa 100644
--- a/cli/brook/main.go
+++ b/cli/brook/main.go
@@ -487,6 +487,10 @@ func main() {
 					Name:  "updateListInterval",
 					Usage: "Update list interval, second. default 0, only read one time on start",
 				},
+				&cli.BoolFlag{
+					Name:  "xForwardedFor",
+					Usage: "Replace the from field in --log, note that this may be forged",
+				},
 			},
 			Action: func(c *cli.Context) error {
 				if c.String("listen") == "" || c.String("password") == "" {
@@ -524,6 +528,7 @@ func main() {
 				if err != nil {
 					return err
 				}
+				s.XForwardedFor = c.Bool("xForwardedFor")
 				g.Add(&runnergroup.Runner{
 					Start: func() error {
 						return s.ListenAndServe()
diff --git a/wsserver.go b/wsserver.go
index 81173ec..5bc4c29 100644
--- a/wsserver.go
+++ b/wsserver.go
@@ -17,7 +17,9 @@ package brook
 import (
 	"context"
 	"crypto/tls"
+	"net"
 	"net/http"
+	"strings"
 	"time"
 
 	"github.com/gorilla/mux"
@@ -29,16 +31,17 @@ import (
 )
 
 type WSServer struct {
-	Password     []byte
-	Domain       string
-	Addr         string
-	HTTPServer   *http.Server
-	TCPTimeout   int
-	UDPTimeout   int
-	Path         string
-	Cert         []byte
-	CertKey      []byte
-	WithoutBrook bool
+	Password      []byte
+	Domain        string
+	Addr          string
+	HTTPServer    *http.Server
+	TCPTimeout    int
+	UDPTimeout    int
+	Path          string
+	Cert          []byte
+	CertKey       []byte
+	WithoutBrook  bool
+	XForwardedFor bool
 }
 
 func NewWSServer(addr, password, domain, path string, tcpTimeout, udpTimeout int, withoutbrook bool) (*WSServer, error) {
@@ -150,26 +153,40 @@ func (s *WSServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	}
 	c := conn.UnderlyingConn()
 	defer c.Close()
+	from := c.RemoteAddr().String()
+	if s.XForwardedFor && r.Header.Get("X-Forwarded-For") != "" {
+		s1 := strings.Split(r.Header.Get("X-Forwarded-For"), ", ")[0]
+		h, _, err := net.SplitHostPort(s1)
+		if err != nil {
+			h = s1
+		}
+		if net.ParseIP(h) != nil {
+			_, p, err := net.SplitHostPort(from)
+			if err == nil {
+				from = net.JoinHostPort(h, p)
+			}
+		}
+	}
 	var ss Exchanger
 	if !s.WithoutBrook {
-		ss, err = NewStreamServer(s.Password, c.RemoteAddr().String(), c, s.TCPTimeout, s.UDPTimeout)
+		ss, err = NewStreamServer(s.Password, from, c, s.TCPTimeout, s.UDPTimeout)
 	}
 	if s.WithoutBrook {
-		ss, err = NewSimpleStreamServer(s.Password, c.RemoteAddr().String(), c, s.TCPTimeout, s.UDPTimeout)
+		ss, err = NewSimpleStreamServer(s.Password, from, c, s.TCPTimeout, s.UDPTimeout)
 	}
 	if err != nil {
-		Log(Error{"from": c.RemoteAddr().String(), "error": err.Error()})
+		Log(Error{"from": from, "error": err.Error()})
 		return
 	}
 	defer ss.Clean()
 	if ss.Network() == "tcp" {
 		if err := s.TCPHandle(ss); err != nil {
-			Log(Error{"from": c.RemoteAddr().String(), "dst": ss.Dst(), "error": err.Error()})
+			Log(Error{"from": from, "dst": ss.Dst(), "error": err.Error()})
 		}
 	}
 	if ss.Network() == "udp" {
 		if err := s.UDPHandle(ss); err != nil {
-			Log(Error{"from": c.RemoteAddr().String(), "dst": ss.Dst(), "error": err.Error()})
+			Log(Error{"from": from, "dst": ss.Dst(), "error": err.Error()})
 		}
 	}
 }
-- 
2.39.1

